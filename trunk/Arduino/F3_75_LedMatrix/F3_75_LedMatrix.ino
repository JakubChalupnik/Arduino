#define LED_WIDTH   64
#define LED_HEIGHT  32
#define LED_HALF (LED_WIDTH * LED_HEIGHT / 8 / 2)
#define LED_SCAN_LINES 16
#define LED_SCAN_MASK 0x0F

#define LED_PIN_A 14
#define LED_PIN_B 15
#define LED_PIN_C 16
#define LED_PIN_D 17

#define LED_PIN_OE 9
#define LED_PIN_R1 20
#define LED_PIN_STB 18
#define LED_PIN_CLK 19
#define LED_PIN_R2 21

#define LedOeDisable() digitalWrite(LED_PIN_OE, 1);
#define LedOeEnable()  digitalWrite(LED_PIN_OE, 0);
#define LedClkLow() digitalWrite(LED_PIN_CLK, 0);
#define LedClkHigh() digitalWrite(LED_PIN_CLK, 1);
#define LedStrobeLow() digitalWrite(LED_PIN_STB, 0);
#define LedStrobeHigh() digitalWrite(LED_PIN_STB, 1);

// R1 corresponds to PB1, R2 to PB4

#define LedR1Low() PORTB &= ~0b00000010
#define LedR1High() PORTB |= 0b00000010

#define LedR2Low() PORTB &= ~0b00010000
#define LedR2High() PORTB |= 0b00010000

#define LedR1Set(val) {if (val) LedR1High (); else LedR1Low (); }
#define LedR2Set(val) {if (val) LedR2High (); else LedR2Low (); }

uint8_t LedBuffer [LED_HALF * 2] ={
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
    0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xE0, 0x07, 0x8F, 0xC7, 0xC7, 0xC7, 0xE0,
    0x00, 0x40, 0x0C, 0xCE, 0x6C, 0x6C, 0x6C, 0xE0, 0x00, 0xE0, 0x0C, 0x0C, 0x6C, 0x6C, 0x6C, 0x60,
    0x01, 0xF0, 0x07, 0x8C, 0x6F, 0xEF, 0xEC, 0x60, 0x23, 0xF8, 0x00, 0xCC, 0x6C, 0x0C, 0x0C, 0x60,
    0x33, 0xF8, 0x0C, 0xCE, 0x6C, 0x6C, 0x6C, 0xE0, 0x3B, 0xF8, 0x07, 0x8F, 0xC7, 0xC7, 0xC7, 0xE0,
    0x3B, 0xF8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xF8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
    0x0B, 0xF8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
    0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xE0, 0x07, 0x8F, 0xC7, 0xC7, 0xC7, 0xE0,
    0x00, 0x40, 0x0C, 0xCE, 0x6C, 0x6C, 0x6C, 0xE0, 0x00, 0xE0, 0x0C, 0x0C, 0x6C, 0x6C, 0x6C, 0x60,
    0x01, 0xF0, 0x07, 0x8C, 0x6F, 0xEF, 0xEC, 0x60, 0x23, 0xF8, 0x00, 0xCC, 0x6C, 0x0C, 0x0C, 0x60,
    0x33, 0xF8, 0x0C, 0xCE, 0x6C, 0x6C, 0x6C, 0xE0, 0x3B, 0xF8, 0x07, 0x8F, 0xC7, 0xC7, 0xC7, 0xE0,
    0x3B, 0xF8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xF8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
    0x0B, 0xF8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

void LedClear (void) {
  memset (LedBuffer, 0, sizeof (LedBuffer));
}

void LedSetRow (uint8_t Row) {
  digitalWrite(LED_PIN_A, (Row & 0x01));
  digitalWrite(LED_PIN_B, (Row & 0x02));
  digitalWrite(LED_PIN_C, (Row & 0x04));
  digitalWrite(LED_PIN_D, (Row & 0x08));
}


void LedScan (void) {
  uint8_t i, b, LedByteU, LedByteL;
  uint8_t *LedByteUPtr, *LedByteLPtr;
  static uint8_t LedRow = LED_SCAN_LINES - 1;    // Active row - the one that's just displayed
  
  LedClkLow ();
  LedRow = (LedRow + 1) & LED_SCAN_MASK;
  LedByteUPtr = LedBuffer + LedRow * 8;
  LedByteLPtr = LedByteUPtr + LED_HALF;
  
  for (i = 0; i < 8; i++) {
    LedByteU = *LedByteUPtr++;
    LedByteL = *LedByteLPtr++;
    for (b = 0; b < 8; b++) {
      LedR1Set (LedByteU & 0x80);
      LedR2Set (LedByteL & 0x80);

      LedByteU <<= 1;
      LedClkHigh ();
      LedByteL <<= 1;
      LedClkLow ();
    }
  }
  
  LedOeDisable ();
  LedSetRow (LedRow);
  LedStrobeLow ();
  LedStrobeHigh ();
  LedStrobeLow ();
  
  LedOeEnable ();
}

void LedConfig (void) {
  
  pinMode(LED_PIN_A, OUTPUT);
  pinMode(LED_PIN_B, OUTPUT);
  pinMode(LED_PIN_C, OUTPUT);
  pinMode(LED_PIN_D, OUTPUT);
  pinMode(LED_PIN_OE, OUTPUT);
  pinMode(LED_PIN_R1, OUTPUT);
  pinMode(LED_PIN_STB, OUTPUT);
  pinMode(LED_PIN_CLK, OUTPUT);
  pinMode(LED_PIN_R2, OUTPUT);
 
  LedStrobeLow ();
  LedClkLow ();
  LedOeDisable ();  
}  
  
  
void setup () {

  Serial.begin (115200);
  Serial.println (F("[F3.75 LedMatrix test]"));
  
  LedConfig ();
}
  
void loop () {
  static uint32_t lastCountTime = 0;

  if (millis() != lastCountTime) {
    lastCountTime = millis();
    LedScan ();
  }
}
